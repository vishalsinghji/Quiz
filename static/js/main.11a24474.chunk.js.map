{"version":3,"sources":["Api.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","images/a.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","props","className","questionNr","totalQuestions","dangerouslySetInnerHTML","__html","question","answers","map","answer","userAnswer","correctAnswer","disabled","value","onClick","callback","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11a24474.chunk.js","sourcesContent":["// import {shuffleArray}\nimport { shuffleArray } from \"./utils\";\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? \"linear-gradient(90deg, #56FFA4, #59BC86)\"\n        : !correct && userClicked\n        ? \"linear-gradient(90deg, #FF5656, #C16868)\"\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from \"react\";\nimport {AnswerObject} from '../App'\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\n\ninterface Props {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) =>void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n}\n\nexport const QuestionCard = (props: Props) => {\n  return ( \n      <Wrapper>\n      <p className=\"number\">\n        Question: {props.questionNr} / {props.totalQuestions}\n      </p>\n      <p dangerouslySetInnerHTML={{ __html: props.question }} />\n      <div>\n        {props.answers.map((answer) => (\n\n          <ButtonWrapper key={answer}\n          correct={props.userAnswer?.correctAnswer === answer}\n          userClicked={props.userAnswer?.answer === answer}\n          >\n            <button disabled={!!props.userAnswer}  value={answer } onClick={props.callback}>\n              <span dangerouslySetInnerHTML={{ __html: answer }}></span>\n            </button>\n          </ButtonWrapper>\n        ))}\n      </div>\n    </Wrapper>\n  );\n};\n","export const shuffleArray  =(array:any[])  => \n[...array].sort(() => Math.random() -0.5);","export default __webpack_public_path__ + \"static/media/a.ca509a1f.jpg\";","import styled ,{createGlobalStyle} from \"styled-components\";\n\nimport BGImage from './images/a.jpg';\n\nexport const GlobalStyle =createGlobalStyle`\n\nhtml {\n    height: 100%;\n}\n\nbody {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0%;\n    padding:0 20px;\n    display: flex;\n    justify-content: center;\n}\n\n* {\n    box-sizing: border-box;\n     font-family: 'Catamaran', sans-serif;\n}\n`;\n\nexport const Wrapper = styled.div `\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color:#fff;\n    }\n\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n    font-family: Fascinate Inline;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin: 20px;\n  }\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #d7898d);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  .start {\n    max-width: 200px;\n  }\n\n`;","import React, { ReactElement, useState } from \"react\";\nimport { QuestionCard } from \"./components/QuestionCard\";\nimport { fetchQuizQuestions } from \"../src/Api\";\nimport { QuestionState, Difficulty } from \"../src/Api\";\nimport { GlobalStyle,Wrapper } from './App.styles';\n\ninterface Props {}\n\nconst TOTAL_QUESTIONS = 10;\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nfunction App({}: Props): ReactElement {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n    if(!gameOver){\n\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if(correct) setScore(prev =>prev+1);\n      const answerObject ={\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers((prev) => [...prev,answerObject]);\n    }\n\n  };\n\n  const nextQuestion = () => {\n    const nextQuestion =number +1;\n    if(nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true)\n    }\n    else {\n      setNumber(nextQuestion)\n    }\n  };\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n    <div className=\"App\">\n      <h1> React Quiz</h1>\n      {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start\" onClick={startTrivia}>\n          Start\n        </button>\n      ) : null}\n\n      {!gameOver && <p className=\"score\">Score:{score}</p>}\n      {loading && <p> Loading Questions ..</p>}\n      {!loading && !gameOver && (\n        <QuestionCard\n          questionNr={number + 1}\n          totalQuestions={TOTAL_QUESTIONS}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n        />\n      )}\n      {!gameOver &&\n      !loading &&\n      userAnswers.length === number + 1 &&\n      number !== TOTAL_QUESTIONS - 1 ? (\n        <button className=\"next\" onClick={nextQuestion}>\n          Next Question\n        </button>\n      ) : null}\n    </div>\n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}